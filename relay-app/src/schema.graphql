schema {
  query: RootQuery
  mutation: Mutations
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  fullName: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum Severity {
  LOW
  MINOR
  MAJOR
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

interface Action {
  """The ID of an object"""
  id: ID!
  date: String!
  bugId: ID!
}

type CommentAction implements Action & Node {
  """The ID of an object"""
  id: ID!
  date: String!
  bugId: ID!
  commentedBy: User
  description: String!
  comment: String!
}

type OpenAction implements Action & Node {
  """The ID of an object"""
  id: ID!
  date: String!
  bugId: ID!
  openedBy: User
  description: String!
}

type FixAction implements Action & Node {
  """The ID of an object"""
  id: ID!
  date: String!
  bugId: ID!
  fixedBy: User
  solution: String!
}

type CloseAction implements Action & Node {
  """The ID of an object"""
  id: ID!
  date: String!
  bugId: ID!
  closedBy: User
  reason: String!
}

type Bug implements Node {
  """The ID of an object"""
  id: ID!
  title: String!
  description: String!
  severity: Severity!
  createdBy: User
  status: Status
  projectId: ID
  actions: [Action]
}

type Project implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  description: String!
  isActive: Boolean!
  bugs(status: Status): [Bug!]
}

type RootQuery {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  totalUsers: Int
  user(id: ID!): User
  users: [User!]!
  project(id: ID!): Project
  projects: [Project]!
  bug(id: ID!): Bug
  bugs: [Bug]!
  openBugs(projectId: ID!): [Bug]!
  action(
    """The ID of an object"""
    id: ID!
  ): Action
  actions(bugId: ID!): [Action]!
}

type Mutations {
  createUser(firstName: String!, lastName: String!, email: String!): User
  createProject(project: ProjectInput): Project
  createBug(bug: BugInput): Bug
  fixBug(fixInfo: FixBugInput): Bug
  closeBug(closeBugInfo: CloseBugInput): Bug
  commentBug(commentInfo: CommentBugInput): Bug
}

input ProjectInput {
  name: String!
  description: String!
  isActive: Boolean!
}

input BugInput {
  title: String!
  description: String!
  severity: Severity!
  projectId: ID!
  userId: ID!
}

input FixBugInput {
  bugId: ID!
  fixedBy: ID!
  solution: String!
}

input CloseBugInput {
  bugId: ID!
  closedBy: ID!
  reason: String!
}

input CommentBugInput {
  bugId: ID!
  commentedBy: ID!
  comment: String!
}
